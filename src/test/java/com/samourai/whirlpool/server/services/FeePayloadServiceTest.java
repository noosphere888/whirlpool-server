package com.samourai.whirlpool.server.services;

import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

import com.samourai.wallet.bip47.rpc.BIP47Account;
import com.samourai.wallet.segwit.SegwitAddress;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturn;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImpl;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImplV0;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImplV1;
import com.samourai.whirlpool.protocol.feePayload.FeePayloadV1;
import com.samourai.whirlpool.server.integration.AbstractIntegrationTest;
import com.samourai.whirlpool.server.services.fee.WhirlpoolFeeData;
import com.samourai.whirlpool.server.services.fee.WhirlpoolFeeOutput;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.TransactionOutPoint;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(webEnvironment = RANDOM_PORT)
public class FeePayloadServiceTest extends AbstractIntegrationTest {
  private static final int FEE_PAYLOAD_LENGTH_V0 = 64;
  private static final int FEE_PAYLOAD_LENGTH_V1 = 46;

  private BIP47Account bip47AccountV0;
  private BIP47Account bip47Account;

  @BeforeEach
  @Override
  public void setUp() throws Exception {
    super.setUp();

    bip47AccountV0 = computeBip47AccountV0();
    bip47Account = computeBip47Account();
  }

  @Test
  public void computeFeePayload_V1() throws Exception {
    Assertions.assertEquals(
        FEE_PAYLOAD_LENGTH_V1,
        feePayloadService.computeFeePayload(123456, (short) 1234, (short) 0, false).length);

    // without feePayload
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 0, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 0, (short) 0, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 0, (short) 0, false)));

    // with feePayload
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 1, (short) 0, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 0, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 257, (short) 0, false)));

    // with feePartner
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 1, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 826, false)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 257, (short) 12345, false)));
  }

  @Test
  public void computeFeePayload_V0() throws Exception {
    Assertions.assertEquals(
        FEE_PAYLOAD_LENGTH_V0,
        feePayloadService.computeFeePayload(123456, (short) 1234, (short) 0, true).length);

    // without feePayload
    Assertions.assertEquals(

        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 0, true)));

    Assertions.assertEquals(

        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 0, (short) 0, true)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 0, (short) 0, true)));

    // with feePayload
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 1, (short) 0, true)));

    Assertions.assertEquals(

        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 0, true)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 257, (short) 0, true)));

    // with feePartner
    Assertions.assertEquals(

        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 1, true)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 826, true)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 257, (short) 12345, true)));
  }

  @Test
  public void parseFeePayload_64() throws Exception {
    // without feePayload
    doParseFeePayload(
        0,
        (short) 0,
        (short) 0,


    doParseFeePayload(
        1,
        (short) 0,
        (short) 0,


    doParseFeePayload(
        123456,
        (short) 0,
        (short) 0,


    // with feePayload
    doParseFeePayload(
        0,
        (short) 1,
        (short) 0,


    doParseFeePayload(
        1,
        (short) 1,
        (short) 0,


    doParseFeePayload(
        123456,
        (short) 257,
        (short) 0,


    // with feePartner
    doParseFeePayload(
        0,
        (short) 0,
        (short) 1,
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        1,
        (short) 1,
        (short) 826,


    doParseFeePayload(
        123456,
        (short) 257,
        (short) 12345,
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");
  }

  @Test
  public void parseFeePayload_46() throws Exception {
    // without feePayload
    doParseFeePayload(
        0,
        (short) 0,
        (short) 0,
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        1,
        (short) 0,
        (short) 0,
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        123456,
        (short) 0,
        (short) 0,
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    // with feePayload
    doParseFeePayload(
        0,
        (short) 1,
        (short) 0,
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        1,
        (short) 1,
        (short) 0,
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        123456,
        (short) 257,
        (short) 0,
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    // with feePartner
    doParseFeePayload(
        0,
        (short) 0,
        (short) 1,
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        1,
        (short) 1,
        (short) 826,
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
        123456,
        (short) 257,
        (short) 12345,
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");
  }

  @Test
  public void decodeEncodedBytes() throws Exception {
    for (int i = 0; i < 1000; i++) {
      byte[] encoded = feePayloadService.computeFeePayload(i, (short) 12345, (short) 1234, false);
      String feePayloadStr = bytesToBinaryString(encoded);
      doParseFeePayload(i, (short) 12345, (short) 1234, feePayloadStr);
    }
  }

  @Test
  public void decode_V0() throws Exception {
    String opReturn =

    doDecode(opReturn, 0, (short) 0, (short) 0, FeeOpReturnImplV0.OP_RETURN_VERSION);

    opReturn =

    doDecode(opReturn, 123456, (short) 257, (short) 12345, FeeOpReturnImplV0.OP_RETURN_VERSION);
  }

  @Test
  public void decode_V1() throws Exception {
    String opReturn =
        "11011100 01010111 10100010 00001111 10010010 01101011 00001100 10111101 01111011 01100111 10111010 00110100 01101101 11001100 10111010 00110111 01001100 01101110 01111100 00001100 11001111 01101101 01010001 11001011 11001100 01100101 10101110 00110000 00100010 00111001 01011110 00010101 01001100 00101101 00100110 01101010 10111101 00101000 11011010 01000111 01000111 01011101 00111011 10010001 01101001 01101010 00000011 01101110 00110101 00001011 01000111 10000001 01111111 11101000 00001100 10010011 00011101 00101110 01110011 00010111 11010100 01101011 01100000 00010111 10101111 00100100 00100111 11110010 00000001 10111110 11000100 00100101 11100100 00011010 11101000 11011000 10011010 00000010 10011101 00000001";
    doDecode(opReturn, 0, (short) 0, (short) 0, FeeOpReturnImplV1.OP_RETURN_VERSION);

    opReturn =

    doDecode(opReturn, 123456, (short) 257, (short) 12345, FeeOpReturnImplV1.OP_RETURN_VERSION);
  }

  @Test
  public void decode_invalid() throws Exception {
    String opReturn =

    doDecodeNull(opReturn);

    opReturn =

    doDecodeNull(opReturn);
  }

  private void doDecode(
      String opReturnStr,
      int feeIndice,
      short scodePayload,
      short partnerPayload,
      short opReturnVersion)
      throws Exception {
    byte[] opReturn = bytesFromBinaryString(opReturnStr);

    // find
    FeeOpReturnImpl feeOpReturnImpl = feePayloadService.findOpReturnImpl(opReturn);
    Assertions.assertEquals(opReturnVersion, feeOpReturnImpl.getOpReturnVersion());

    // accepts
    Assertions.assertTrue(feePayloadService.acceptsOpReturn(opReturn));

    // decode
    ECKey pk =
        ECKey.fromPrivate(
            new BigInteger(
                "34069012401142361066035129995856280497224474312925604298733347744482107649210"));
    SegwitAddress segwitAddress = new SegwitAddress(pk, params);
    TransactionOutPoint outPoint = mockTxOutput(segwitAddress).getOutPointFor();

    WhirlpoolFeeOutput feeOutput = new WhirlpoolFeeOutput(null, opReturn);
    WhirlpoolFeeData feeData =
        feePayloadService.decode(feeOutput, bip47AccountV0, bip47Account, outPoint, pk.getPubKey());

    Assertions.assertEquals(feeIndice, feeData.getFeeIndice());
    Assertions.assertEquals(scodePayload, feeData.getScodePayload());
    Assertions.assertEquals(partnerPayload, feeData.getPartnerPayload());
    Assertions.assertEquals(opReturnVersion, feeData.getOpReturnVersion());
    Assertions.assertEquals(FeePayloadV1.FEE_PAYLOAD_VERSION, feeData.getFeePayloadVersion());
  }

  private void doDecodeNull(String opReturnStr) throws Exception {
    byte[] opReturn = bytesFromBinaryString(opReturnStr);

    // find
    Assertions.assertNull(feePayloadService.findOpReturnImpl(opReturn));

    // accepts
    Assertions.assertFalse(feePayloadService.acceptsOpReturn(opReturn));

    // decode
    ECKey pk =
        ECKey.fromPrivate(
            new BigInteger(
                "34069012401142361066035129995856280497224474312925604298733347744482107649210"));
    SegwitAddress segwitAddress = new SegwitAddress(pk, params);
    TransactionOutPoint outPoint = mockTxOutput(segwitAddress).getOutPointFor();

    WhirlpoolFeeOutput feeOutput = new WhirlpoolFeeOutput(null, opReturn);
    Exception e =
        Assertions.assertThrows(
            Exception.class,
            () ->
                feePayloadService.decode(
                    feeOutput, bip47AccountV0, bip47Account, outPoint, pk.getPubKey()));
    Assertions.assertEquals("Unknown FeeOpReturnImpl", e.getMessage());
  }

  private static String bytesToBinaryString(byte[] bytes) {
    List<String> strs = new ArrayList<>();
    for (byte b : bytes) {
      String str = String.format("%8s", Integer.toBinaryString((b + 256) % 256)).replace(' ', '0');
      strs.add(str);
    }
    return StringUtils.join(strs.toArray(), " ");
  }

  private static byte[] bytesFromBinaryString(String str) {
    String[] bytesStrs = str.split(" ");
    byte[] result = new byte[bytesStrs.length];
    for (int i = 0; i < bytesStrs.length; i++) {
      String byteStr = bytesStrs[i];
      result[i] = (byte) (int) (Integer.valueOf(byteStr, 2));
    }
    return result;
  }

  private void doParseFeePayload(
      int feeIndice, short scodePayload, short partnerPayload, String feePayloadStr)
      throws Exception {
    short opReturnVersion = FeeOpReturnImplV1.OP_RETURN_VERSION;
    FeeOpReturn feeOpReturn =
        new FeeOpReturn(bytesFromBinaryString(feePayloadStr), opReturnVersion);
    WhirlpoolFeeData feeData = feePayloadService.parseFeePayload(feeOpReturn, null);
    Assertions.assertEquals(feeIndice, feeData.getFeeIndice());
    Assertions.assertEquals(scodePayload, feeData.getScodePayload());
    Assertions.assertEquals(partnerPayload, feeData.getPartnerPayload());
    Assertions.assertEquals(opReturnVersion, feeData.getOpReturnVersion());
    Assertions.assertEquals(FeePayloadV1.FEE_PAYLOAD_VERSION, feeData.getFeePayloadVersion());
  }
}
